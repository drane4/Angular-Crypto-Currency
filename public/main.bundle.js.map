{"version":3,"sources":["./src/$_lazy_route_resource lazy","./src/app/app.component.css","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/data.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;ACVA,wCAAwC,yBAAyB,mBAAmB,gCAAgC,qBAAqB,gDAAgD,gDAAgD,OAAO,uBAAuB,0BAA0B,OAAO,wBAAwB,oBAAoB,OAAO,C;;;;;;;ACA3V,oJAAoJ,UAAU,qCAAqC,4CAA4C,0B;;;;;;;;;;;;;;;;;;;;ACArM;AACG;AAQ7C;IAKE,sBAAoB,KAAkB;QAAlB,UAAK,GAAL,KAAK,CAAa;QAJtC,UAAK,GAAG,KAAK,CAAC;QACd,eAAU,GAAG,MAAM,CAAC,IAAI,CAAC;IAKzB,CAAC;IAED,+BAAQ,GAAR;QAAA,iBAMC;QALC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;aACnB,SAAS,CAAC,aAAG;YACZ,KAAI,CAAC,OAAO,GAAG,GAAG,CAAC;YACnB,mBAAmB;QACrB,CAAC,CAAC,CAAC;IACP,CAAC;IAfU,YAAY;QALxB,wEAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAM2B,kEAAW;OAL3B,YAAY,CAgBxB;IAAD,mBAAC;CAAA;AAhBwB;;;;;;;;;;;;;;;;;;;;;ACTiC;AACjB;AACI;AACW;AAGT;AAc/C;IAAA;IAAyB,CAAC;IAAb,SAAS;QAXrB,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,oEAAY;aACb;YACD,OAAO,EAAE;gBACP,gFAAa;gBACb,8EAAgB;aACjB;YACD,SAAS,EAAE,CAAC,kEAAW,CAAC;YACxB,SAAS,EAAE,CAAC,oEAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;ACpBqB;AACO;AACnB;AAG/B;IAIE,qBAAoB,KAAiB;QAAjB,UAAK,GAAL,KAAK,CAAY;IAAG,CAAC;IAEzC,+BAAS,GAAT;QAAA,iBAGC;QAFC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,+EAA+E,CAAC;aACnG,GAAG,CAAC,gBAAM,IAAI,YAAI,CAAC,MAAM,GAAG,MAAM,EAApB,CAAoB,CAAC,CAAC;IACzC,CAAC;IATU,WAAW;QADvB,yEAAU,EAAE;yCAKgB,wEAAU;OAJ1B,WAAW,CAUvB;IAAD,kBAAC;CAAA;AAVuB;;;;;;;;;ACLxB;AAAA,mFAAmF;AACnF,8FAA8F;AAC9F,yEAAyE;AACzE,gFAAgF;AAEzE,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IAClB;;;;;;;;SAQK;CACL,CAAC;;;;;;;;;;;;;;AChB6C;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,8EAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,8EAAc,EAAE,CAAC;AACnB,CAAC;AAED,yGAAsB,EAAE,CAAC,eAAe,CAAC,kEAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/$$_lazy_route_resource lazy\n// module id = ./src/$$_lazy_route_resource lazy recursive\n// module chunks = main","module.exports = \"div#crypto-container {\\r\\n    background:white;\\r\\n    width: 70%;\\r\\n    margin: 0 auto 4px auto;\\r\\n    padding: 1em;\\r\\n    -webkit-box-shadow: 1px 1px 0 lightgrey;\\r\\n            box-shadow: 1px 1px 0 lightgrey;\\r\\n  }\\r\\n  \\r\\n  span.left {\\r\\n    font-weight: bold;\\r\\n  }\\r\\n  \\r\\n  span.right {\\r\\n    float:right;\\r\\n  }\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = ./src/app/app.component.css\n// module chunks = main","module.exports = \"<div *ngIf=\\\"cryptos\\\">\\n  <div id=\\\"crypto-container\\\" *ngFor=\\\"let crypto of objectKeys(cryptos)\\\">\\n    <span class=\\\"left\\\">{{ crypto }}</span>\\n    <span class=\\\"right\\\">{{ cryptos[crypto].USD | currency:'USD':true}}</span>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = ./src/app/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\nimport { DataService } from './data.service';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n  objectKeys = Object.keys;\n  cryptos: any;\n\n  constructor(private _data: DataService) {\n\n  }\n\n  ngOnInit() {\n    this._data.getPrices()\n      .subscribe(res => {\n        this.cryptos = res;\n        //console.log(res);\n      });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { DataService } from './data.service';         \nimport { HttpClientModule } from '@angular/common/http'; \n\n\nimport { AppComponent } from './app.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule                      \n  ],\n  providers: [DataService],                    \n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class DataService {\n  \n  result:any;\n\n  constructor(private _http: HttpClient) {}\n\n  getPrices() {\n    return this._http.get(\"https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,IOT&tsyms=USD\")\n      .map(result => this.result = result);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/data.service.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n /*  firebase: {\n    apiKey: \"AIzaSyAK-tztDjG268wvvlLIJ6ga51OJFKOEy0w\",\n    authDomain: \"angularcryptocurrency.firebaseapp.com\",\n    databaseURL: \"https://angularcryptocurrency.firebaseio.com\",\n    projectId: \"angularcryptocurrency\",\n    storageBucket: \"angularcryptocurrency.appspot.com\",\n    messagingSenderId: \"88780558518\"\n\n  } */\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts"],"sourceRoot":"webpack:///"}